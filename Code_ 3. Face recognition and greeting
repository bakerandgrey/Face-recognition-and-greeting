import RPi.GPIO as GPIO
import cv2
import numpy as np
import os 
import pyttsx
import time
import datetime 


GPIO.setwarnings(False)
GPIO.setmode(GPIO.BOARD)
GPIO.setup(11, GPIO.IN)         #Read output from PIR motion sensor
GPIO.setup(21, GPIO.OUT)

print "initallisation"
time.sleep(12)


engine = pyttsx.init()
recognizer = cv2.face.LBPHFaceRecognizer_create()
recognizer.read('/home/pi/trainer.yml')
cascadePath = "/home/pi/haarcascade_frontalface_default.xml"
faceCascade = cv2.CascadeClassifier(cascadePath);
eyeCascade = cv2.CascadeClassifier('/home/pi/haarcascade_eye.xml')
font = cv2.FONT_HERSHEY_SIMPLEX

#iniciate id counter
id = 0

# names related to ids: example ==> Marcelo: id=1,  etc
names = ['None','naveen', 'pranav','sruthy'] 

# Initialize and start realtime video capture
cam = cv2.VideoCapture(0)
cam.set(3, 640) # set video widht
cam.set(4, 480) # set video height

# Define min window size to be recognized as a face
minW = 0.1*cam.get(3)
minH = 0.1*cam.get(4)

while True:
    i=GPIO.input(11)
    
    if i==0:
    
        print "no motion detected"
        
        time.sleep(3)


    if i==1:
        print "Motion detected"
        d=0
        while d<=20:
            
            
            
            

            ret, img =cam.read()
            
            
            count=0
            gray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)

            faces = faceCascade.detectMultiScale( 
                gray,
                scaleFactor = 1.2,
                minNeighbors = 5,
                minSize = (int(minW), int(minH)),
               )

            for(x,y,w,h) in faces:

                cv2.rectangle(img, (x,y), (x+w,y+h), (0,255,0), 2)

                id, confidence = recognizer.predict(gray[y:y+h,x:x+w])

            # Check if confidence is less them 100 ==> "0" is perfect match 
                if (confidence < 73):
                    id = names[id]
                    confidence = "  {0}%".format(round(100 - confidence))
                    count=count+1
                else:
                    id = "unknown"
                    count=0
                cv2.putText(img, str(id), (x+5,y-5), font, 1, (255,255,255), 2)
                cv2.putText(img, str(confidence), (x+5,y+h-5), font, 1, (255,255,0), 1)  
                d=d+1
        
        
        y= datetime.datetime.now()
        x=y.hour         
        if (count == 1):
                print ('hello ' + id)
                if(x<12):
                    os.system("espeak 'good morning'"+id)
                if(x<16 and x>=12):
                    os.system("espeak 'good afternoon'"+id)
                if(x<20 and x>=16):
                    os.system("espeak 'good evening'"+id)
                   
        if(count > 1):
                if(x<12):
                    os.system("espeak 'good morning people'")
                if(x<16 and x>=12):
                    os.system("espeak 'good afternoon people'")
                if(x<20 and x>=16):
                    os.system("espeak 'good evening people'")
       
            
        if(count == 0):
                print ('sorry not recognised')
                if(x<12):
                    os.system("espeak 'good morning welcome to baker and grey'")
                if(x<16 and x>=12):
                    os.system("espeak 'good afternoon welcome to baker and grey'")
                if(x<20 and x>=16):
                    os.system("espeak 'good evening welcome to baker and grey'")
         
                
       

       

        k = cv2.waitKey(10) & 0xff # Press 'ESC' for exiting video
       
        if k == 27:
            break
       
    
# Do a bit of cleanup
print("\n [INFO] Exiting Program and cleanup stuff")
cam.release()
cv2.destroyAllWindows()
